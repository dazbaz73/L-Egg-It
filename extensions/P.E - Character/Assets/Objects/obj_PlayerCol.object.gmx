<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Player</spriteName>
  <solid>-1</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize vars

globalvar state; // Create var STATE
state = "StandRight"; // Set var STATE
globalvar isPaused; // Create var ISPAUSED
isPaused = false; // Set var ISPAUSED
globalvar roomSwitch; // Create var ROOMSWITCH
roomSwitch = false; // Set var ROOMSWITCH

walkSpeed = 4; // Speed the character will move at when walking
hangSpeed = 3; // Speed the character will move at while hanging from ceiling
jumpHeight = 7; // The height of the characters jump
jumpCount = 0; // Counts how many times character has jumped
canJump = false; // Can the player jump?
grav = .5; // The gravity of the character
wallslideGrav = 1.5; // The gravity of the character while WALLSLIDING
ySpeed = 0; // The speed of which the character will fall

player = instance_create(x,y,obj_Player); // Create "Player" object
player.image_xscale = .3; // Scale Player image to fit with this Collision Box
player.image_yscale = player.image_xscale; // Scale y scale to same as x scale

scr_SetPlayerLocation(); // Set the Characters Location. Used for "Entering" a new room from different doors.

if(directionUponEnter == "Right") // If character enters from the Right
{
    state = "StandRight"; // Change state to character facing Right
}
else
if(directionUponEnter == "Left") // If character enters from the Left
{
    state = "StandLeft"; // Change state to character facing Left
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wallslide Jump
switch(state) // Change characters state
{
    case "WallslideJumpRight": // If state is Wall Jump Right
    state = "JumpRight"; // Change state to Jump Right
    break;
    
    case "WallslideJumpLeft": // If state is Wall Jump Left    
    state = "JumpLeft"; // Change state to Jump Left
    break;
}

/*
So, the point of this method is that we set the character into a state we the player cannot
control. This alarm changes his state back to one we can control, while keeping the animation
the same. We do this because we want to force the character to be pushed away from the wall
after a walljump. This enables us to be able to come back to the same wall we initially jump
from.
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player follow PlayerCol

player.x = x;
player.y = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause the game
if(!gamepad_is_connected(0)) // Keyboard Keys
{
    keyPause = keyboard_check_pressed(vk_escape); // The PAUSE key
}
else
if(gamepad_is_connected(0)) // Controller Buttons
{
    keyPause = gamepad_button_check_pressed(0, gp_start); // The PAUSE key
}


if(keyPause) //  If the PAUSE button is pushed...
{
    if(isPaused == false) // If the game is NOT paused
    {
        isPaused = true; // Pause the game
    }
    else
    if(isPaused == true) // If the game IS paused
    {
        isPaused = false; // UN-Pause the game
    }
}  


if(isPaused || roomSwitch) // If the game is PAUSED, or Character is SWITCHING ROOMS
{
    exit; // Stop any scripts from being run
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Character Collisions and Controlls

if(!gamepad_is_connected(0)) // Keyboard Keys
{
    keyLeft = keyboard_check(vk_left);
    keyRight = keyboard_check(vk_right);
    keyJump = keyboard_check_pressed(vk_up);
    keyReleaseJump = keyboard_check_released(vk_up);
    keyDuck = keyboard_check(vk_down);
    keyHang = keyboard_check(ord('Z'));
}
else
if(gamepad_is_connected(0)) // Controller Buttons/Axis
{
    keyLeft = -gamepad_axis_value(0, gp_axislh);
    keyRight = gamepad_axis_value(0, gp_axislh);
    keyJump = gamepad_button_check_pressed(0, gp_face1);
    keyReleaseJump = gamepad_button_check_released(0, gp_face1);
    keyDuck = gamepad_axis_value(0, gp_axislv);
    keyHang = gamepad_button_check(0, gp_shoulderlb);
}

if(place_meeting(x,y+ySpeed,obj_Ground)) // COLLISION WITH GROUND
{
    if(!place_meeting(x, y+sign(ySpeed), obj_Ground)) // If the character is falling
    {
        switch(state)
        {
            case "StandRight":
            case "StandLeft":
            case "WalkRight":
            case "WalkLeft":
            case "JumpRight":
            case "JumpLeft":
            case "FallRight":
            case "FallLeft":
            case "DuckRight":
            case "DuckLeft":
            y += sign(ySpeed); // Set character to fall
            canJump = false; // canJump equals false, Cannot jump while falling UNLESS you've jumped first.
            break;
        }
    }
    
    ySpeed = 0; // Stop character from falling
    canJump = true; // Character is allowed to jump
    jumpCount = 0; // Reset jumpCount
    
    switch(state) // Set characters state
    {
        case "FallRight":
        case "WallslideLeft":
        state = "StandRight"; // Set characters state to standing right
        break;
        
        case "FallLeft":
        case "WallslideRight":
        state = "StandLeft"; // Set characters state to standing left
        break;
    }
}

y += ySpeed; // Set players y coordinate to add speed from ySpeed
ySpeed += grav; // Constantly increase speed of falling


if(place_meeting(x,y+1,obj_Ground)) // COLLISION - TOP OF GROUND
{
    switch(state)
    {
        case "JumpRight":
        case "WallslideJumpRight":
        state = "StandRight"; // Set characters state to standing right
        break;
        
        case "JumpLeft":
        case "WallslideJumpLeft":
        state = "StandLeft"; // Set characters state to standing left
        break;
    }
}


if(!place_meeting(x,y+1,obj_Ground)) // INIATE FALLING
{
    if(ySpeed &gt; 2) // If characters falling speed is active
    {
        canJump = false;  // canJump equals false, Cannot jump while falling UNLESS you've jumped first.
        switch(state)
        {
            case "StandRight":
            case "WalkRight":
            case "JumpRight":
            case "DuckRight":
            case "WallslideJumpRight":
            state = "FallRight"; // Set state to falling right depending on current state
            break;
            
            case "StandLeft":
            case "WalkLeft":
            case "JumpLeft":
            case "DuckLeft":
            case "WallslideJumpLeft":
            state = "FallLeft"; // Set state to falling left depending on current state
            break;
        }
    }
}

if(place_meeting(x,y-jumpHeight,obj_Ground)) // COLLISION WITH CEILING
{
    if(keyHang &amp;&amp; !place_meeting(x,y+1,obj_Ground)) // If HANG key is held, AND characters is NOT standing on the ground
    {
        switch(state)
        {
            case "JumpRight":
            case "FallRight":
            case "WallslideJumpRight":
            state = "CeilingHangRight"; // Set state to Hanging from Ceiling Right
            jumpCount = 2; // Max count for jumping/character is not allowed to jump again after grabbing the ceiling
            break;
            
            case "JumpLeft":
            case "FallLeft":
            case "WallslideJumpLeft":
            state = "CeilingHangLeft"; // Set state to Hanging from Ceiling Left
            jumpCount = 2; // Max count for jumping/character is not allowed to jump again after grabbing the ceiling
            break;
            
            case "CeilingHangRight":
            case "CeilingHangMoveRight":
            case "CeilingHangLeft":
            case "CeilingHangMoveLeft":
            if(!place_meeting(x,y-sign(jumpHeight),obj_Ground)) y -= sign(jumpHeight); // Keeps characters Collision Box snug against the Ceiling
            ySpeed = 0; // Stop character from falling
            break;
        }
    }
    else
    if(!keyHang) // If player releases the HANG key
    {
        switch(state)
        {
            case "CeilingHangRight":
            state = "FallRight"; // Set state to falling Right
            break;
            
            case "CeilingHangLeft":
            state = "FallLeft"; // Set state to falling Left
            break;
        }
    }
}
else
if(!place_meeting(x,y-jumpHeight,obj_Ground)) // If you run out of Ceiling to grab
{
    switch(state)
    {
        case "CeilingHangLeft":
        case "CeilingHangMoveLeft":
        state = "FallLeft"; // Set state to Falling Left
        break;
        
        case "CeilingHangRight":
        case "CeilingHangMoveRight":
        state = "FallRight"; // Set state to Falling Right
        break;
    }
}

if(keyLeft &amp;&amp; keyHang &amp;&amp; place_meeting(x-walkSpeed,y,obj_Ground)) // COLLISION - RIGHT SIDE OF WALL - Initiate Wall Sliding if LEFT KEY, KEY HANG and COLLISION with the obj_Ground are happening
{
    switch(state)
    {
        case "JumpLeft":
        case "FallLeft":
        case "WallslideJumpLeft":
        state = "WallslideLeft"; // Set state to Wallslide Left
        break;
        
        case "WallslideLeft":
        ySpeed = wallslideGrav; // Set characters falling gravity to user var wallslideGrav
        break;
    }
}
else
if(keyLeft &amp;&amp; keyHang &amp;&amp; !place_meeting(x-walkSpeed,y-jumpHeight,obj_Ground)) // If player releases LEFT KEY or KEY HANG while wallsliding
{
    switch(state)
    {
        case "WallslideLeft":
        state = "FallLeft"; // Set state to Falling Left
        break;
    }
}

if(keyRight &amp;&amp; keyHang &amp;&amp; place_meeting(x+walkSpeed,y,obj_Ground)) // COLLISION - LEFT SIDE OF WALL - Initiate Wall Sliding if RIGHT KEY, KEY HANG and COLLISION with the obj_Ground are happening
{
    switch(state)
    {
        case "JumpRight":
        case "FallRight":
        case "WallslideJumpRight":
        state = "WallslideRight"; // Set state to Wallslide Right
        break;
        
        case "WallslideRight":
        ySpeed = wallslideGrav; // Set characters falling gravity to user var wallslideGrav
        break;
    }
}
else
if(keyRight &amp;&amp; keyHang &amp;&amp; !place_meeting(x+walkSpeed,y-jumpHeight,obj_Ground)) // If player releases RIGHT KEY or KEY HANG while wallsliding
{
    switch(state)
    {
        case "WallslideRight":
        state = "FallRight"; // Set state to Falling Right
        break;
    }
}

if(keyLeft) // LEFT KEY IS PRESSED
{
    switch(state)
    {
        case "StandRight":
        case "StandLeft":
        state = "WalkLeft"; // Set state to Walking Left
        part = instance_create(x,y-irandom_range(1,8),obj_Particle); // Create a "Dust Particle"
        part2 = instance_create(x,y-irandom_range(1,8),obj_Particle); // Create a "Dust Particle"
        part.dir = "East"; // Set Dust Particle Direction
        part2.dir = "East"; // Set Dust Particle Direction
        break;
        
        case "JumpRight":
        state = "JumpLeft"; // Set state to Jump Left
        break;
        
        case "FallRight":
        state = "FallLeft"; // Set state to Fall Left
        break;
        
        case "WalkLeft":
        case "JumpLeft":
        case "FallLeft":
        if(!place_meeting(x-walkSpeed,y,obj_Ground)) // If the character isn't colliding with the wall
        {
            x -= walkSpeed; // Set characters speed
        }
        break;
        
        case "CeilingHangRight":
        case "CeilingHangLeft":
        state = "CeilingHangMoveLeft"; // Set state to Hang from Ceiling Moving Left
        break;
        
        case "CeilingHangMoveLeft":
        if(!place_meeting(x-hangSpeed,y,obj_Ground))  // If the character isn't colliding with the wall
        {
            x -= hangSpeed; // Set characters speed
        }
        break;
    }
}
else
if(!keyLeft) // LEFT KEY IS RELEASED
{
    switch(state)
    {
        case "WalkLeft":
        state = "StandLeft"; // Set state to Standing Left
        break;
        
        case "CeilingHangMoveLeft":
        state = "CeilingHangLeft"; // Set state to Ceiling Hang Left
        break;
        
        case "WallslideLeft":
        state = "FallRight"; // Set state to Falling Right
        canJump = false; // Character cannot jump
        break;
    }
}

if(keyRight) // RIGHT KEY IS PRESSED
{
    switch(state)
    {
        case "StandRight":
        case "StandLeft":
        state = "WalkRight"; // Set state to Walking Right
        part = instance_create(x,y-irandom_range(1,8),obj_Particle); // Create a "Dust Particle"
        part2 = instance_create(x,y-irandom_range(1,8),obj_Particle); // Create a "Dust Particle"
        part.dir = "West"; // Set Dust Particle Direction
        part2.dir = "West"; // Set Dust Particle Direction
        break;
        
        case "JumpLeft":
        state = "JumpRight"; // Set state to Jumping Right
        break;
        
        case "FallLeft":
        state = "FallRight"; // Set state to Falling Right
        break;
        
        case "WalkRight":
        case "JumpRight":
        case "FallRight":
        if(!place_meeting(x+walkSpeed,y,obj_Ground))  // If the character isn't colliding with the wall
        {
            x += walkSpeed; // Set characters speed
        }
        break;
        
        case "CeilingHangLeft":
        case "CeilingHangRight":
        state = "CeilingHangMoveRight"; // Set state to Ceiling Hang Moving Right
        break;
        
        case "CeilingHangMoveRight":
        if(!place_meeting(x+hangSpeed,y,obj_Ground))  // If the character isn't colliding with the wall
        {
            x += hangSpeed; // Set characters speed
        }
    }
}
else
if(!keyRight) // RIGHT KEY RELEASED
{
    switch(state)
    {
        case "WalkRight":
        state = "StandRight"; // Set state to Standing Right
        break;
        
        case "CeilingHangMoveRight":
        state = "CeilingHangRight"; // Set state to Ceiling Hang Facing Right
        break;
        
        case "WallslideRight":
        state = "FallLeft"; // Set state to Falling Left
        canJump = false; // Character cannot jump
        break;
    }
}

if(keyJump) // JUMP KEY PRESSED (This block is for double jumping/wall jumping)
{
    switch(state)
    {
        case "JumpRight":
        case "FallRight":
        if(jumpCount == 1) // If character has jumped once
        {
            state = "JumpRight"; // Set state to Jumping Right
            ySpeed = -jumpHeight; // Set characters velocity to the jumpHeight
            jumpCount = 2; // Limit characters Jump
        }
        break;
        
        case "JumpLeft":
        case "FallLeft":
        if(jumpCount == 1) // If character has jumped once
        {
            state = "JumpLeft"; // Set state to Jumping Left
            ySpeed = -jumpHeight; // Set characters velocity to the jumpHeight
            jumpCount = 2; // Limit characters Jump
        }
        break;
        
        case "WallslideRight":
        state = "WallslideJumpLeft"; // Set state to Wall Jump Left
        ySpeed = -jumpHeight/1.5; // Set characters velocity to the jumpHeight(Remove "/1.5" for full velocity wall jump
        jumpCount = 2; // Limit characters Jump
        alarm[0] = room_speed/5; // Set alarm to enable movement
        break;
        
        case "WallslideLeft":
        state = "WallslideJumpRight"; // Set state to wall Jump Right
        ySpeed = -jumpHeight/1.5; // Set characters velocity to the jumpHeight(Remove "/1.5" for full velocity wall jump
        jumpCount = 2; // Limit Characters Jump
        alarm[0] = room_speed/5; // Set alarm to enable movement
        break;
    }
}

if(keyReleaseJump) // If JUMP KEY is RELEASED
{
    switch(state)
    {
        case "JumpRight":
        ySpeed = 0; // Set characters velocity to 0(Controlled Jump)
        state = "FallRight"; // Set state to Falling Right
        break;
        
        case "JumpLeft":
        ySpeed = 0; // Set characters velocity to 0(Controlled Jump)
        state = "FallLeft"; // Set state to Falling Left
        break;
    }
}

if(keyJump &amp;&amp; canJump &amp;&amp; !place_meeting(x,y-1,obj_Ground)) // JUMP KEY IS PRESSED
{
    switch(state)
    {
        case "StandRight":
        case "WalkRight":
        case "DuckRight":
        if(jumpCount == 0) // If character has NOT jumped
        {
            state = "JumpRight"; // Set state to Jumping Right
            ySpeed = -jumpHeight; // Set characters velocity to the jumpHeight
            jumpCount = 1; // Character has jumped once
            canJump = false; // Cannot Jump
            part = instance_create(x-irandom_range(1,8),y,obj_Particle); // Create "Dust Particle"
            part2 = instance_create(x+irandom_range(1,8),y,obj_Particle); // Create "Dust Particle"
            part.dir = "North"; // Set Dust Particles Direction
            part2.dir = "North"; // Set Dust Particles Direction
        }
        break;
        
        case "StandLeft":
        case "WalkLeft":
        case "DuckLeft":
        if(jumpCount == 0) // If character has NOT jumped
        {
            state = "JumpLeft"; // Set state to Jumping Left
            ySpeed = -jumpHeight; // Set characters velocity to the jumpHeight
            jumpCount = 1; // Character has jumped once
            canJump = false; // Cannot Jump
            part = instance_create(x-irandom_range(1,8),y,obj_Particle); // Create "Dust Particle"
            part2 = instance_create(x+irandom_range(1,8),y,obj_Particle); // Create "Dust Particle"
            part.dir = "North"; // Set Dust Particles Direction
            part2.dir = "North"; // Set Dust Particles Direction
        }
        break;
    }
}

if(state == "WallslideJumpRight") if(!place_meeting(x+walkSpeed,y,obj_Ground)) x += walkSpeed; // Make character move if not colliding with wall

if(state == "WallslideJumpLeft") if(!place_meeting(x-walkSpeed,y,obj_Ground)) x -= walkSpeed; // Make character move if not colliding with wall

if(keyDuck) // DUCK KEY IS PRESSED
{
    switch(state)
    {
        case "StandRight":
        case "WalkRight":
        state = "DuckRight"; // Set state to Duck Right
        break;
        
        case "StandLeft":
        case "WalkLeft":
        state = "DuckLeft"; // Set state to Duck Left
        break;
    }
}
else
if(!keyDuck) // DUCK KEY IS RELEASED
{
    switch(state)
    {
        case "DuckRight":
        state = "StandRight"; // Set state to Standing Right
        break;
        
        case "DuckLeft":
        state = "StandLeft"; // Set state to Standing Left
        break;
    }
}

if(!keyHang) // If HANG KEY is RELEASED
{
    switch(state)
    {
        case "WallslideRight":
        state = "FallLeft"; // Set state to Falling Left
        break;
        
        case "WallslideLeft":
        state = "FallRight"; // Set state to Falling Right
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Restart room

/*
DEBUGGING ONLY
*/

if(gamepad_button_check(0, gp_select)) // If select is pressed on the Controller
{
    room_restart(); // Restart room
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///View Controller

/*
SETUP THE VIEW FOR THE GAME
This is just so we don't have to 
adjust each rooms view properties.
*/

view_visible[0] = true;
view_enabled = true;

view_wview[0] = 512;
view_hview[0] = 384;

view_wport[0] = 1024;
view_hport[0] = 768;

view_hborder[0] = view_wview[0];
view_vborder[0] = view_hview[0];

view_hspeed[0] = -1;
view_vspeed[0] = -1;

view_object[0] = obj_PlayerCol;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Switching Rooms

if(place_meeting(x+1,y,obj_GoRight)) // If the character collides with the object "obj_GoRight"
{
    if(!instance_exists(obj_BlackFade)) // If the fade doesn't exist
    {
        //scr_RoomGoRight();
        roomSwitch = true; // Set roomSwitch variable
        directionUponEnter = "Right"; // Set directionUponEnter variable
        instance_create(view_xview[0],view_yview[0],obj_BlackFade); // We create it!
    }
}

if(place_meeting(x-1,y,obj_GoLeft)) // If the character collides with the object "obj_GoLeft"
{
    if(!instance_exists(obj_BlackFade)) // If the fade doesn't exist
    {
        //scr_RoomGoLeft();
        roomSwitch = true; // Set roomSwitch variable
        directionUponEnter = "Left"; // Set directionUponEnter variable
        instance_create(view_xview[0],view_yview[0],obj_BlackFade); // We create it!
    }
}

/*
Creating the Black Fade object is just for looks. If you would like the room to instantly switch,
Un Comment the scripts "scr_RoomGoRight" and "scr_RoomGoLeft".
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>-1</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
